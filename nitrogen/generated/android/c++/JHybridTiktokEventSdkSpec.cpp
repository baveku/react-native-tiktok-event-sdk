///
/// JHybridTiktokEventSdkSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTiktokEventSdkSpec.hpp"



#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <string>
#include <optional>
#include <unordered_map>

namespace margelo::nitro::tiktokeventsdk {

  jni::local_ref<JHybridTiktokEventSdkSpec::jhybriddata> JHybridTiktokEventSdkSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTiktokEventSdkSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTiktokEventSdkSpec::initHybrid),
    });
  }

  size_t JHybridTiktokEventSdkSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridTiktokEventSdkSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<bool>> JHybridTiktokEventSdkSpec::initialSdk(const std::string& accessToken, const std::string& appId, const std::string& tiktokAppId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* accessToken */, jni::alias_ref<jni::JString> /* appId */, jni::alias_ref<jni::JString> /* tiktokAppId */)>("initialSdk");
    auto __result = method(_javaPart, jni::make_jstring(accessToken), jni::make_jstring(appId), jni::make_jstring(tiktokAppId));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridTiktokEventSdkSpec::identifyUser(const std::string& userId, const std::optional<std::string>& userName, const std::optional<std::string>& phone, const std::optional<std::string>& email) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* userId */, jni::alias_ref<jni::JString> /* userName */, jni::alias_ref<jni::JString> /* phone */, jni::alias_ref<jni::JString> /* email */)>("identifyUser");
    method(_javaPart, jni::make_jstring(userId), userName.has_value() ? jni::make_jstring(userName.value()) : nullptr, phone.has_value() ? jni::make_jstring(phone.value()) : nullptr, email.has_value() ? jni::make_jstring(email.value()) : nullptr);
  }
  void JHybridTiktokEventSdkSpec::logout() {
    static const auto method = javaClassStatic()->getMethod<void()>("logout");
    method(_javaPart);
  }
  void JHybridTiktokEventSdkSpec::trackEvent(const std::string& event, const std::optional<std::unordered_map<std::string, std::string>>& params) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* event */, jni::alias_ref<jni::JMap<jni::JString, jni::JString>> /* params */)>("trackEvent");
    method(_javaPart, jni::make_jstring(event), params.has_value() ? [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
      auto __map = jni::JHashMap<jni::JString, jni::JString>::create(params.value().size());
      for (const auto& __entry : params.value()) {
        __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
      }
      return __map;
    }() : nullptr);
  }

} // namespace margelo::nitro::tiktokeventsdk
